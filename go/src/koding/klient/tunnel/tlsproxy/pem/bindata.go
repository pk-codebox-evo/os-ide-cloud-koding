// Code generated by go-bindata.
// sources:
// fullchain.pem
// privkey.pem
// DO NOT EDIT!

package pem

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullchainPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x96\xc9\xd2\xaa\xcc\x93\xc6\xf7\x5c\x45\xef\x8d\x0e\x11\x04\x71\xf1\x5f\x54\x31\x2b\x85\xcc\xd3\x8e\xc9\x62\x14\x27\x28\xe0\xea\x3b\x7c\xdf\xef\x0c\x7d\x4e\xc7\xd7\xee\x4c\xb2\xa2\xf2\x49\x92\xe7\x97\xff\xfd\xf9\x41\x59\xd5\xcd\xff\x12\x65\xc7\xd3\x15\x5d\x04\x9e\xfc\x15\xa5\x90\xae\xcb\x9b\x46\x14\xc1\xe6\x8c\x01\xd1\x21\xc0\xba\x0b\x68\x49\xcb\xea\xf7\x0e\x6e\x78\xcd\x52\x67\x6e\x91\x79\xa9\xdb\x70\x33\x02\xb4\x2a\xba\x0f\xd5\xd5\x33\x56\xb2\x65\x28\x12\x1f\x50\x48\x1e\x66\x71\x05\x27\x88\xcd\x00\x82\xd8\x03\x5d\xe0\x21\x27\x26\x0a\x88\xa5\xc0\xb6\xcf\x32\xd9\xa1\x24\xb2\x6f\xf9\x02\x95\xac\x37\x97\x32\x82\x34\x72\x11\xd1\xed\xaf\xe7\x12\x25\xcf\xf7\xbf\x12\x74\x59\xd9\x15\x6a\x35\xe5\x7d\x47\x97\x2e\x8c\xd1\x0a\x4a\x85\xd0\xb3\xd9\xc8\x04\x35\x68\x36\x25\x30\x23\x09\xa6\x9f\x18\x65\xae\x60\x46\x8d\xfc\x33\x88\x60\x3c\x2b\x12\x70\xbf\x2b\x42\x9e\xc8\x38\x5d\x51\x73\xcf\x8c\x71\xee\x46\xcf\xdd\x90\xae\x43\xbd\x01\x26\xc4\xed\xa3\x6a\x6b\x95\x3a\x12\x1a\x02\x5b\x56\x00\xb8\x88\xc0\x16\xc0\x27\x41\xc4\x67\x11\xd8\x32\x18\x1e\xa2\x95\x8b\x88\xf4\x3a\xf1\xef\x51\xc8\x76\x96\x9c\xb6\xbb\xb7\xa1\x5d\x37\xf7\xe4\x59\xae\x91\x7c\xc1\x94\x95\x5c\xd9\x7a\x7d\xe2\xbe\x90\x8e\xa3\x17\x2e\x89\x7f\x99\xbd\xba\x5c\x42\xee\x0d\x8e\xdb\xa9\x05\x66\x23\x2a\xce\x1c\x56\x87\x75\xaa\x50\x31\x25\x86\x9c\xc2\x83\x55\xcc\x9d\xe8\xf5\x0c\xe6\xa8\xad\xa5\xfa\xb5\x7f\x30\x48\xa1\x68\x65\x7f\xb0\x2f\xbb\x70\x97\xcd\x44\x23\xc8\xd3\x8f\xe9\xfb\x99\x75\x1c\xfd\xec\x23\x35\xb9\x20\x6b\x5c\x5a\x5b\xce\x82\xf3\xf8\x36\xb2\x21\xf4\xc4\x8d\xee\x9f\x28\xe5\x61\xd2\xfb\xf1\xa6\x59\xe7\x0e\x7b\x00\x05\x5b\x51\x24\x5e\x74\xe5\x9f\xb3\xc0\xeb\xcb\xb5\x36\x92\x5d\x69\xd9\x9b\x4d\x2f\xf8\xc2\xb2\x4f\x1b\xf7\x6e\x86\x86\xec\x66\xf5\x66\xe0\x42\x27\xe0\xa8\xb6\x96\xd4\x52\xcc\x82\xed\xbd\x39\xbd\x5f\x2f\xff\xe0\xb1\xdb\xdd\xb8\x75\xd5\x4e\x6a\x5d\xd7\x79\xed\x77\xd8\x3e\xb0\xf4\x39\x57\xd3\x61\x47\x5f\xb7\x9c\xcf\x12\xe0\x1b\xc6\xc6\xf1\xd0\xe6\xca\xd8\x54\x45\x14\x8b\xdb\x45\xfa\xb5\x8c\xe8\xd7\x84\xaf\xae\x6e\x6d\x85\x78\xdd\xc6\xfb\xf0\xfc\x50\xf8\x1b\xb2\x1e\x12\x31\x8d\xcc\x4a\xae\xaf\xbd\xbd\xf2\x92\xad\x4b\xc0\x06\x70\xd8\xeb\xa2\x24\x89\x22\x05\x30\x26\x12\x8e\xa5\xc0\xa1\x2d\x60\x6b\x5b\x08\x6c\x09\xe0\x10\x23\x48\xab\x60\xe7\x17\x27\xdb\x0e\x11\xb4\x55\x51\x7c\xa9\xc0\xf6\x15\x48\x10\x84\x18\x3f\x21\x96\x15\x68\xe7\x12\x05\x1a\x80\x3e\xef\x5c\x73\x10\x04\x57\x41\x06\x0d\x00\x3f\x0e\x4b\xd8\x0e\x21\xf4\xde\x02\x36\x85\x22\xe2\xac\x04\x5f\xc6\x72\xb2\x83\xe4\xb8\x0f\x8c\x1b\xdb\xc3\x06\x5c\xa9\xaf\xc3\x2e\x92\x55\x09\x84\x18\xba\x83\xdb\xdf\x1b\xa8\xb1\xc5\x38\x66\xce\x25\x2b\x7b\x27\x8c\x26\x81\x6f\x5e\x83\x07\xc9\x6f\x37\x43\x60\x3b\x2d\x52\x75\x42\x19\x24\xd6\xcf\x24\x86\xd0\xf6\x35\x04\x54\x55\x67\x2a\xba\xd0\x00\x6f\x2c\xc7\x29\x66\x4d\x62\xf4\xdd\x58\x88\xbb\x3d\x5a\xb8\x57\x12\x39\x6b\x12\x72\x4d\x7e\xeb\x48\x21\x72\x53\xde\xe7\x13\x85\x44\xe1\x97\xbe\x15\x88\x55\x6d\x0e\x85\xe6\x90\x4b\x2d\x4c\x31\x13\x2c\x85\xc8\xdd\xb3\x9b\xfd\x2e\x25\x34\x66\x6a\x40\xe7\x4c\x30\xc6\xec\x89\xcb\x35\x7b\xcc\xd8\xd3\x8d\x32\x56\x10\x7e\xf7\x40\x96\xa5\x15\x98\x18\xbf\xdb\x24\x8a\xc7\x94\x39\xb6\xa9\xcb\x8d\xc9\x2a\xc2\xed\x77\x93\x31\xd4\x35\x06\xe9\xda\x8a\x00\x56\x61\x5f\x42\x09\xc8\x22\x05\x3c\x11\x72\x38\x36\xbe\x64\x00\x55\x64\x67\xf4\xf9\x36\x08\x2e\x62\x72\xc2\xbf\xe4\x01\x2c\x87\x6a\xff\x53\x5e\x93\x6b\xdf\x15\x51\x7f\x96\x84\x74\xf5\xf9\x5b\xb3\x44\xd0\x88\xf0\x86\x17\xd8\xef\x9c\x21\x8d\x10\xb6\x3f\xb2\xd4\xae\x4f\x43\xb3\x2a\x54\x1f\x53\x59\xa8\x70\xba\x7a\x1c\x33\xad\xc5\x71\xef\xe3\xbc\x0f\x5e\x69\x18\xb4\xba\x16\x90\x8c\xd9\xe3\xf8\xd6\x62\xbf\x0f\x5e\x65\xd8\x8d\xc9\x02\xed\x38\x3a\xd1\x69\x18\xac\xba\xaa\x8c\x89\x08\x27\x2a\xeb\x67\x4e\x57\xbb\x51\x57\x95\x26\x66\x8e\x4b\xa2\x2a\x63\xcc\xf8\xb8\x60\x3a\x3a\x15\x21\x9d\xaa\xfe\x5f\xb7\xfa\xea\xf1\x95\x86\x26\xa7\xab\xc9\x44\x15\x21\xd7\xea\xaa\x42\xeb\xea\x47\x1f\x5c\x3f\xdd\xff\xbf\xba\x6d\xb0\xa7\x2e\x57\x8f\x6b\x1a\x39\x53\x7e\x6b\xa7\x1f\xfe\x48\xfd\x6e\x90\x60\xaf\x43\x60\x8b\x30\x30\x95\x92\x4c\xb9\x57\xa5\x87\x54\x38\xec\xc8\xa5\x9a\x37\x7d\x6a\x9c\x87\x79\x31\x98\x38\xb1\x8f\xf8\xbe\x01\x07\xd3\xe3\xb6\xfb\x8a\x4a\x90\x65\xb7\x41\x62\xa3\x88\x34\xe5\x6b\x6c\x75\x50\xaa\xdb\x6e\x07\x96\xf7\xc9\x18\x79\x32\x78\x86\x2c\x18\x4f\x7b\x9a\x64\xc8\x18\x8a\xa0\x99\xae\xaf\xdc\x93\x24\xaf\xdc\xe8\x14\xe2\xc4\xa3\xea\x14\x2b\x51\x67\x12\xe1\xc2\x71\x9b\x8d\x34\x3d\x64\x62\xb4\x4c\x72\x85\xf0\xf1\xcc\xe4\x54\xaf\x1e\x27\xe6\x6d\x5c\x70\x35\xa8\x2f\x15\xaf\xe9\x73\xd0\x37\x65\xcf\x5e\x51\xaa\x0d\xfc\xa0\x06\xd4\x96\x09\xef\xe7\x9b\xf9\xd4\xef\xc9\x4e\x60\xc5\x03\x2c\x58\x83\x59\xc9\x42\xa4\x59\x65\x6f\x75\x3f\x6a\x0c\x4b\xdb\xf5\xd3\xb9\xe3\xb3\xa9\xb1\x17\x61\x5c\x25\xe6\x2c\x40\xbf\x51\xa6\xf2\xcc\x06\x94\x95\x5b\x67\xed\x69\x3e\x42\x72\xdd\xbd\x93\x67\x35\x2e\x7b\x31\x7b\x02\x7b\x41\x77\x81\xde\x3b\xaf\xb0\x9a\x2c\x76\xc0\xeb\xc8\xdc\x9f\xea\x1c\x0a\xd1\xd8\x97\xc2\xd3\x2a\x8b\xf8\x54\x10\x9f\x37\x28\xe5\xb8\x3c\x2d\xc6\x7b\x3b\x78\x2e\x5b\xbd\x3d\xcd\xe8\x32\x8c\xe7\x37\x7e\x9c\x5e\x46\xcf\xf1\xc7\xcb\x75\xdb\x22\x39\x77\xa8\x2f\x90\xc9\xa6\xf4\x37\xdc\xfe\x3f\xf0\xb5\x1f\xf0\xb1\x8f\x1f\xe0\xb3\x45\xac\x40\x1b\x03\x00\x82\x8b\x92\x33\x83\x51\x95\xcb\x4d\x94\x7e\x91\xe2\x1b\x14\x2f\x05\x48\x60\x4b\x21\xd7\x26\x3a\xfe\x07\x72\xf3\x5b\x4e\xc3\xe2\x5e\xa8\xca\x4b\x57\xcc\x7b\xc2\x70\x55\xa1\x05\x4b\xe2\x42\x3f\xbf\x05\x6b\x21\x42\x29\x5b\xf6\xb3\xb2\x82\xe0\x07\x96\x28\xa9\x75\xbc\x40\x84\x6e\xc6\x1c\x69\x5d\x36\xa1\xae\xe0\x15\xc1\x7d\x24\x79\x32\x83\x24\x34\x9b\xab\xcc\x98\x12\xa0\xcd\x6e\x88\x24\x4f\x9f\xff\x88\x11\xca\x6d\x64\x03\x81\xf6\x63\x70\x32\xac\x90\x18\x04\x68\x56\x1a\xe0\x7f\xdf\x30\x78\x92\x3f\x77\x85\x58\xac\xba\xfc\x73\x6e\x67\x7d\x05\xd5\xcf\x0a\xd4\xf6\xaf\x04\x6c\x47\x01\x9d\xaa\xc7\x25\x8d\x1c\xee\xab\xa2\x3f\x68\xf9\x3b\x2c\xa9\x3f\x69\x79\x33\x11\x12\x94\x67\x67\xb4\x25\x9b\x77\x34\x8b\x0f\xe6\x10\xaf\xd2\x63\xb7\xfa\xbd\xea\x46\xd5\x94\xed\x77\x42\x24\xba\xc6\xa1\xdc\xbb\xb4\xac\x50\x0f\xbe\x2f\x4d\xbb\x8a\x0f\x86\xfc\x98\xd5\x5a\x13\x79\xab\x29\x4a\xaf\x17\xf8\xa2\xce\xb3\x3b\x87\x43\x70\xdd\x71\x6a\x7a\xdb\x5a\x76\xa9\x16\xf3\xa2\xb6\x97\x2e\xd1\xac\xed\x98\x26\x7c\x08\x04\xca\x45\xf3\x66\x69\x77\xac\x5c\xbb\x85\x33\xbf\x53\xfe\x70\x7b\x69\x4d\x0e\xb4\xd3\xf2\x2a\xf9\x5c\xe1\x5f\xdc\x99\x3f\xec\x20\xe7\xa5\xf1\x98\x4f\xc7\xcc\x5b\xc2\xd4\x14\x9a\x73\x7b\xb6\x25\x3d\xa1\xa9\x44\xa8\xb6\xf7\xe4\xb1\xf7\x7b\xd9\x97\xd7\x63\xc7\xc7\x67\x6d\x39\x4e\xbc\xd4\x65\x4c\x35\xdc\xd6\xca\xdb\x44\xd5\x63\x43\x58\xf8\x9c\x52\xc2\x04\xca\x8d\x95\xcf\x3c\xec\x5e\xf7\x56\x36\x6f\x21\xa0\x52\x7e\x3e\x0b\xf3\x68\xbb\x11\x9e\x86\x7b\x62\x9d\x6b\xd0\x9d\x6d\x4f\x2d\x90\x64\xa3\x9c\xb1\x90\x57\x07\xca\xf3\x31\xa0\x43\x25\x09\x99\x7c\x25\x2b\xdc\x0e\xb7\x76\x96\x57\xfa\x6d\x4e\x4d\x43\x6d\x2d\x7d\x4d\x9f\x2d\x87\xf2\x70\x9a\x75\xda\xd4\x42\x3b\x44\xfc\x93\xaf\xc4\x9e\xd9\x81\x09\x30\x1a\x2b\xb5\xe4\x27\x2d\xe1\xd5\x13\x45\x10\xb5\x44\xfe\xf6\x71\x8f\xfa\xa6\x25\x26\x10\xcb\x70\xfb\x19\x65\x09\x5c\xbe\x20\x60\x0b\x5f\x20\x84\x00\x89\x20\x8e\xc9\xf5\x37\x3c\x01\x5b\x96\xf3\x15\xce\x48\xd2\x55\xea\x37\xe4\xc0\xaa\x4e\x7e\x22\x27\x8d\xcc\x25\x59\x38\xfa\x6b\x84\xd5\xae\x35\xfa\x63\x93\xb3\x60\x4c\x43\xa7\xcb\x6e\xce\x52\x44\x26\x6d\xf4\xe6\x44\x65\x1e\x38\xfc\x66\xf2\x04\x0c\xf1\x94\x6a\x0e\x9d\x4b\xc3\x64\x30\x0a\xf9\xd0\xe1\xcf\x43\x99\x7b\x5c\x3e\xa3\x9f\x2f\xc7\x96\xca\x59\xe7\xeb\x4f\xcc\x28\x1f\x3a\x12\x93\x41\x44\x23\x5f\xfa\x1a\x08\x31\x51\x06\xe0\xcf\xe7\x72\xbe\x6b\xaf\x57\x7e\x7d\x66\x7b\x7f\xb4\x8b\xeb\x56\x56\x42\x51\xa9\x1d\x40\xa8\x00\xfc\x03\x35\x99\x26\xee\x0a\x74\x88\x93\x1b\xb6\x09\x04\x58\x26\x16\xf9\x9b\x67\x48\x02\xe3\xef\x58\xa2\x80\x13\xd7\xbf\x4a\x36\x49\xbe\x70\x5f\x15\x19\x11\x9e\x8d\x7e\xee\x0a\xcd\xec\x7e\xac\xa7\x46\x7f\x5c\x92\x15\x08\xdf\xa4\x15\x64\xd3\x03\x2b\x85\x24\x15\x1b\x3c\x78\x57\xf5\xfb\x17\xb3\xd9\x8f\x59\x75\x6d\x12\xfe\xd3\x44\x91\x6b\x32\x86\x9e\x1c\xc5\xf4\xfd\xf6\x68\x05\xb2\x09\x43\xc9\x94\xfc\x96\x8c\xd4\x27\xf9\x7f\xef\x2b\xff\xb6\x82\xfc\xed\x4a\xd4\xf7\xfe\x2a\x03\xd6\xb3\x22\xf9\x6a\x36\xa1\xd4\x14\x2a\x8c\x0e\x62\x10\x6e\x8a\x2e\xe5\x72\xb9\xee\x52\x3f\xbf\x95\x82\xde\x8a\x27\x63\x0e\xab\xe3\x59\xae\x5b\xf6\xa4\x39\x8e\xa6\x9e\x06\x6a\x44\x4c\x90\xab\xd7\xee\xc8\xbb\x82\x57\x57\xce\x9a\x4c\xc3\x73\x28\x0b\xfe\x5d\xf3\xe1\x43\x86\xfd\x7b\x25\x6c\x38\x14\xe9\x1b\x6f\x82\xe5\x52\xde\xab\xbd\x1c\xdf\x9f\xdb\x1d\x89\xce\xef\x59\xd8\x52\x04\xdc\xf5\xe9\xe4\x92\x77\x1f\xd4\x7b\xa4\xf8\x5c\x8a\x1e\x4f\x57\x92\xf9\x32\x3d\xb0\xa8\x61\xde\x39\x5a\x06\xae\x41\x05\xdf\xf4\x65\xe8\x6b\x67\xe1\x35\x6c\x9b\x21\xf4\x07\xed\xe2\x63\x32\x52\xd1\xde\x1a\x76\x76\xbc\x6e\xd8\xe2\xb5\xb6\xd2\x03\xdd\xf7\xd7\xb6\x9b\x21\x89\x9c\x57\xb8\xa3\xcf\xd1\x6a\x21\x2f\xd9\xbc\x2e\x16\x98\xca\x65\xae\x6f\x45\xdf\xb4\xa1\xd0\xa9\xcb\xc6\x7e\x39\x9d\x4a\x59\xd7\x64\xa3\xf2\x09\x5f\x1d\xfa\xa6\xec\xe9\x78\x53\x87\x5d\x1b\xe7\xc1\xde\xd2\x43\x63\x57\x13\x58\x0b\xaf\x54\xcc\x54\x97\x6b\x4c\xe6\x2e\xa0\x4d\xb4\xb1\x0f\xbe\x79\x96\x5b\xe7\x92\xb1\x26\x4f\x9d\x2f\x8f\xf6\xd1\x73\x07\x4f\x63\x34\xb6\x94\x4e\xa0\x75\x6f\x15\xbf\x95\x4c\x65\xa4\x6d\xfc\x9f\xff\xfc\x0b\x6e\xfe\x27\x00\x00\xff\xff\xd2\x7e\xcf\x5c\x68\x0d\x00\x00")

func fullchainPemBytes() ([]byte, error) {
	return bindataRead(
		_fullchainPem,
		"fullchain.pem",
	)
}

func fullchainPem() (*asset, error) {
	bytes, err := fullchainPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullchain.pem", size: 3432, mode: os.FileMode(420), modTime: time.Unix(1474360936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _privkeyPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xd5\x37\x12\xb3\x58\x16\x86\xe1\x9c\x55\x74\x4e\x4d\xe1\x41\x04\x1d\x5c\x3c\x17\xe1\x3d\x19\x08\x61\x85\x13\x56\xac\x7e\x6a\xfe\x9e\xac\x4f\x78\xa2\xa7\xbe\xe4\xfd\xcf\xff\x4e\x90\x55\xdd\xfa\xcb\xf1\xf4\x08\x04\xf2\x5f\x86\x9c\xfe\xf9\x22\xa6\xae\xcb\xc7\xa9\x0b\x40\x02\x96\x50\xf7\x4b\xd3\xb7\x2a\x7f\xe2\x02\x70\x65\x05\x00\x5f\x14\x8c\xfe\xac\x6b\xff\x03\x6a\x19\x80\x49\x17\x80\x2b\xb6\x93\xce\x9f\xfa\x2d\xa6\x9d\xe0\x7f\x90\xb2\x78\x87\x0f\x6f\x09\x62\x7c\x2d\x31\xf6\x33\x6c\x9c\xf5\x72\x59\xc0\x7f\xb0\xf7\xd3\xde\xc5\x0c\x77\x48\xc6\x2a\xe0\xc7\xe5\x14\x1b\x72\xb0\x18\x70\x89\x42\x51\x17\x90\xa6\x1e\x69\x4a\xae\x21\x87\x8d\xca\x17\xc9\xf7\xab\x37\x69\x2b\x4f\xa9\x21\xb4\x8b\x5c\x1a\x1f\x8f\xcc\x87\xc1\x7a\x08\x78\x58\xb2\xc5\x06\xb8\xa8\x88\x0e\x0d\x54\xe0\x32\x3b\x62\x21\xb7\x3d\x19\xfd\x3d\x7b\x65\x3d\x42\x9f\x28\x67\x78\xc0\xdb\xc2\x85\xc5\xb7\xbd\xc9\xcc\x27\xdd\xb8\x7d\x3c\x51\x41\xcb\xbe\x5e\x8f\x25\x16\x4c\x70\x25\x0f\xfd\x29\x58\x25\xb6\x1c\xda\x3d\x75\x10\xd5\xb7\x31\xa2\x79\x89\x63\x0b\xe4\x0a\xee\x67\xb3\x58\x46\x4f\xa4\xab\x07\xf7\x27\xdb\x7d\x32\x25\x19\x7c\xdd\xcc\x68\xb8\x25\xe8\x60\x0e\xe4\xef\x0a\x36\xa7\xc2\x62\x8e\xd7\xf3\xd0\xf6\x20\x54\xef\x2e\x16\xa4\xa3\x72\xe7\x13\xc9\x96\x2e\xf1\x30\xec\x13\x54\x40\x70\xd7\x83\x51\xcc\x9b\xc1\x32\x51\x03\x21\x36\x46\xaf\x86\x67\x2a\xff\x87\x0a\xbc\x5e\x63\xd8\xd5\x39\x7c\xd7\xa4\xcb\x94\x2c\xaf\x13\x9d\x1c\x80\x6f\x2b\x8f\x7c\xd0\xbb\x91\x9c\xc9\x02\xb5\x29\x00\x20\x8b\x75\x2d\x03\x95\xec\x41\x23\x02\xc3\x5d\x8f\xb9\x3c\xb4\x77\x12\xa7\x3c\x39\x7a\xf9\xb6\xc5\x7b\x5f\xbc\xf5\x6f\x96\xd5\xc9\x4b\xb1\xd2\xd2\x5d\x91\xe9\x14\xcc\x89\xea\xaa\x72\xa6\x4e\x6b\xd2\xed\xe8\xc1\x44\xf0\x28\xa8\xdd\x0d\x9c\x33\x5d\x3b\x73\x52\x8f\xcb\xdf\x4e\xe8\x1a\xe6\x3c\xef\x78\x44\xe7\x8d\x3d\xc0\x14\xe7\x78\x53\xe2\x45\x1b\x51\x6f\xce\xc5\x89\x83\x94\xed\xa9\xf3\xb5\xe0\x0b\xb2\xdf\x1c\x0f\xdc\x24\xcd\xee\x25\x0e\xc7\x05\x46\x37\x67\x8c\x2f\xd4\xe1\xf3\xa6\xe9\x48\x5c\x28\x93\x74\x93\x8e\xbd\xfd\x53\xda\x93\x27\x8e\x10\xf2\xef\x5a\x7c\x78\x48\x11\xbb\x10\xc2\xc6\xf6\x44\xe8\x77\x9f\xd4\xee\x67\xc7\x0a\x5d\xfd\xf4\xf4\x99\x15\x27\x4e\x77\x4b\x61\x05\x98\x26\x19\xc4\x46\xb9\x1d\x1a\x06\xbf\x14\x30\x1b\x8e\x22\xef\x6d\xb6\xc2\xb7\x9a\x2d\xc5\x5b\xa1\x26\x02\x60\xf4\x8e\x2b\x5d\x54\xe9\x3e\xb5\x85\x3a\xa1\xce\xd2\xce\xdb\x4b\x9e\x81\x11\x60\xad\xc7\xd4\x1d\x64\xef\xca\x39\xbe\x65\x10\x39\x94\xd1\x8a\xc8\x25\x77\x9c\x30\x56\xb8\x51\x9e\xcb\x72\xf8\x8c\xc8\x7a\x5e\x3b\x7f\x7a\x50\xe1\xd0\xa8\x76\x20\x1c\x56\x4d\xb8\x0d\xe9\xba\x86\x50\xbb\x52\x72\x06\xf9\x47\xa6\xfc\x49\xd6\x2c\x3c\x85\x6f\x1c\x39\xb3\xda\x1a\x67\xcc\xe3\x1a\xc1\xa5\xc1\x74\xa1\x8e\x40\xb6\x4e\x26\x55\xdf\xcb\x9f\xe9\xdb\xba\xec\xdf\xe0\x35\x05\x3d\x97\xea\x43\xe5\x02\x34\xfa\xb6\x0d\x45\x4e\xa7\x7e\x77\x37\xc4\xce\x18\xb9\xf8\x81\x0e\xad\x27\x9b\xff\xe2\xc5\xaa\xd7\xaf\x2c\xd0\x35\x6e\xc8\x14\xd3\xd8\x09\xca\xc7\xed\xf3\x1c\x47\x99\x7d\x5a\xd3\x2c\x59\x8f\xdd\xe5\x2a\xdf\x5e\xde\x57\xdf\x4f\x59\x6d\x1e\xd7\x72\x23\x98\x3e\x45\x5b\x08\xe3\x7d\xc7\x4e\xaa\x4b\x43\x15\x43\x4f\x21\x2c\x64\xeb\x1f\x32\xe0\x07\x9d\x83\x8f\xac\x52\xb8\xf7\xeb\x50\x8d\x4c\x93\xb2\x98\x2c\xd2\xb9\x5d\x34\x55\x6d\x93\x00\xf9\x7a\xcb\x8b\xc6\xa4\xfb\x80\xdc\x3e\x6f\xb9\x18\x7d\xca\xee\x4c\xf0\x60\x65\xbb\xc5\x03\x76\x1c\x48\xcd\xb8\xe5\x5d\xd2\xa9\x6e\x58\x62\x58\x22\x64\xfd\xf8\xd0\x78\x8b\x5e\xbc\x77\xb8\x7d\x6b\xe4\x4b\x29\x9b\xf8\x91\x99\x38\x9a\x35\x12\x53\x53\xfe\x0b\xbd\xe0\x55\xe6\x11\xaa\xef\x0f\x98\x11\xe7\x6f\xcc\xb1\xa7\xdb\x6e\xb2\x35\x3a\xf2\x20\x04\x0e\xf3\x89\x17\x3e\x20\x31\x15\xdb\x37\x74\x46\x76\x9e\x7a\x31\x0b\x37\xbf\xff\x90\xc5\x8e\x20\x69\x87\x2a\x98\x0b\xf4\xf8\xf2\xc3\xf9\x39\x78\x2e\x41\xe2\x4f\x27\x99\x02\x36\x1f\x9a\x60\x98\x31\xc0\x48\x4a\x05\x84\xd7\x2d\x45\x03\x85\xfc\xbc\xdd\x12\xbd\x3b\x9d\x4b\x7b\xe4\x5e\xf0\x51\x4f\x6c\xa7\x0d\x74\x69\x8a\x50\xf3\x4c\x5a\xa4\xbe\x8a\x53\x6c\x8a\xbe\xe4\xd1\x34\x3f\x35\xf5\xfd\xe6\xc6\xa7\x5e\x09\x21\xce\xf1\x38\xd3\xd4\x88\xea\xb7\x12\xda\x11\xd5\x4e\x9c\xcf\xb6\x00\xa9\x66\x57\xe0\x5a\x67\xf8\x3c\xc9\x33\x95\x79\x94\x3b\x05\xab\x45\x85\xd7\xad\x77\xcc\x3b\x4c\x34\x8e\x59\xef\x45\xa6\x4b\xfd\x1f\xf1\x85\xd8\x9f\x05\x1f\x55\xb6\x2c\x86\x69\xd3\xab\x78\x0e\x9c\x9e\x3a\x4b\x5f\xfd\x79\x79\x3c\x56\x16\xeb\x3c\x73\xe1\x70\x92\x90\xe0\xae\x12\xa7\x7f\xc9\x41\xbd\xf3\x64\xe3\xbb\xa8\x79\x36\xc7\x43\x70\x90\x6f\x5d\xad\xaf\xc0\xa1\x8a\x42\x85\x18\xae\x04\x2a\x5d\xe3\x14\x97\xf0\x66\x33\x8e\x5f\x19\xdb\x0d\x21\x0e\xa7\x0a\x8a\xc6\xaf\x66\x5e\x95\x78\x8c\x23\x55\xe9\xae\xf6\x19\xc9\x2b\xc2\x67\xc5\x46\xb8\x3a\x1f\x32\x9d\x34\x9a\xa1\x8d\x25\x01\xdc\xea\x2f\x4a\xbf\x58\xf1\x1b\x5f\xf6\x98\xcd\xab\x20\x46\x41\x2a\xa9\x1e\xf8\xff\xc8\x95\xb9\xb8\xd0\x5e\xd8\xd3\x2c\xc8\x91\x9a\xa3\x0d\xf9\x64\xef\x3b\x91\xad\xd6\x84\xc0\xb6\x3d\xff\xa5\x70\x8b\xea\x9f\xc5\x3c\x12\x0a\x01\x56\x1f\x26\x8d\xd6\x28\xb8\xa7\x0e\xc3\x00\xfb\xaf\x2b\x12\x64\xcb\x28\x40\x61\xb0\xbd\xc3\x18\xe2\x4d\x21\xb5\x3b\x60\x7a\x0a\x9d\x47\x4f\x80\xce\xc4\xfd\x8a\xd3\x01\x3d\x39\x57\xca\x9f\xad\x9e\x2b\xf9\x8c\x41\x2b\x5c\x0d\x45\x74\xbc\x87\xd5\x62\xb4\x62\xa8\x35\xce\xdc\x0e\x2c\x96\x5d\x52\x9a\x1c\x39\xf1\xef\x60\x70\x83\xa7\x7e\xf2\xf3\x25\x9a\x9b\x11\x68\xe4\x41\xda\xf0\x07\xfe\xfe\x1b\xf9\xd3\x1e\xd9\x92\xfe\xdd\xa3\xff\x06\x00\x00\xff\xff\x21\x11\xc5\x11\xac\x06\x00\x00")

func privkeyPemBytes() ([]byte, error) {
	return bindataRead(
		_privkeyPem,
		"privkey.pem",
	)
}

func privkeyPem() (*asset, error) {
	bytes, err := privkeyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "privkey.pem", size: 1708, mode: os.FileMode(420), modTime: time.Unix(1474360936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullchain.pem": fullchainPem,
	"privkey.pem":   privkeyPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fullchain.pem": {fullchainPem, map[string]*bintree{}},
	"privkey.pem":   {privkeyPem, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
