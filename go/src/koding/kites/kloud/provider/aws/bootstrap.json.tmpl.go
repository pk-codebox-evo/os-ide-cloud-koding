// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x57\x4b\x8b\x23\x37\x10\xbe\xcf\xaf\x68\x9a\x1c\x12\x18\x3b\xb6\x67\xbd\x33\x9e\xdb\x1e\x72\x5a\x08\x7b\xc8\x29\x21\x88\x6a\x75\x75\xaf\xb0\x5a\x6a\xf4\x68\xe3\x18\xff\xf7\xa0\x7e\x4a\xfd\x70\x9c\x78\xc9\x32\x0c\xa6\xca\x9f\x4a\x5f\x55\x7d\x2a\xc9\x97\xa7\x28\x8a\x4b\x25\x2b\x96\xa2\x8a\xdf\x23\x67\x47\x51\x0c\x27\xdd\x1b\xce\xa4\x14\xb5\x26\x47\x3c\xc7\xef\x51\xfc\xc3\xa5\x02\xb5\x86\x93\x26\x83\xff\x1a\x3f\x77\x60\x8d\x54\xa1\x99\x82\x07\xbf\x07\x56\x98\x33\x29\x42\x60\xe3\xbb\xc6\x35\xe6\xfa\x14\x45\x57\x07\x8f\xa5\x35\xa5\x35\x03\xc7\xaa\xa4\x3e\xc7\x0a\xb8\xc5\x26\x90\x0b\x52\x95\x74\xed\xfe\x59\xda\x05\x6a\xf6\x8c\x29\x4b\x15\x49\xb8\xa4\xc7\x3b\x56\x0f\xe0\x51\x14\x65\x92\x3b\x96\x17\xc0\x04\x51\xd2\x1a\x24\x06\x12\x8e\x64\xc2\x06\x28\xbf\x23\x4e\x8a\x19\x58\x6e\x88\x40\x73\x92\xea\x48\x80\xf2\x69\x28\x96\x9f\x6e\x84\x62\xc2\xa0\x12\x68\x48\x0e\x06\x4f\x70\x6e\xb8\x55\x25\x25\x2c\x3f\x4d\xab\xa4\x6d\x22\xd0\xdc\x88\xd7\x00\x9a\x28\x47\x99\x32\x91\x77\xae\x69\xac\xfc\x56\x1c\xa4\x56\x31\x73\x26\xb9\x92\xb6\x5c\x03\xe7\xf2\x44\x80\xf3\x69\x18\x28\xd8\x42\x1c\x2e\xe5\xd1\x96\x3f\xf6\xaa\x2c\x98\x7e\x8e\x42\x35\xfd\x34\x0a\x76\xc4\x33\x29\x81\xa9\x1b\xcc\x3a\xc8\xba\x4d\x6f\xb0\xf1\x4c\x04\x14\x38\x51\xa8\x42\x2d\xad\xa2\x18\x9c\x23\x32\xd6\x69\x60\x8e\x05\xd9\x1e\x03\x5f\x77\xcf\x03\xd4\x40\xae\x83\xc5\x51\x14\xff\x0a\x05\x0e\x0b\x51\x54\x4c\x49\x51\xa0\x30\x3e\xc7\x8e\xe7\xf0\xd9\x57\x75\x46\x1b\x3e\x5d\x5f\x26\x21\xef\xc7\xc8\x78\x59\xd5\xd1\xd3\x1b\x47\x77\x8e\xf3\x54\xa0\x53\x29\x86\x7c\xa1\x02\xc6\x21\x61\xdc\xa9\xed\x2f\x29\x6a\xa2\x97\xcb\xfa\x93\xe7\xff\x5d\x0a\xbc\x06\x25\xff\x17\xdd\x29\xa0\x24\xa5\x4d\x38\xa3\x84\x95\x44\x0a\xc2\xc1\x0a\xfa\x35\x7e\x8f\x8c\xb2\xf8\x60\x1b\x9f\x7d\x70\x9f\x5e\xdc\xec\xf7\x0d\xeb\xea\x4d\x2b\xbf\xb8\xed\x3e\x41\x41\x6b\xe8\x38\x8f\xb0\x5e\x9b\x75\xfd\xf7\xf3\x26\xe4\xdf\xea\x2c\x60\x77\xe7\x80\x1a\x27\xf9\x70\x2d\xeb\x2c\x7e\x6b\xf3\x8d\x1b\xfd\x7c\x8f\x6a\x13\xd0\x5a\x52\x06\xa6\xb9\x0f\x47\x95\x5f\x6d\x67\x6a\xdf\x5f\x2a\xc3\xae\x9e\x7f\xdd\xac\xac\x09\x78\x3c\x9b\x6c\x82\x45\x77\xcc\xf2\xd9\x23\x18\x8c\xee\xe0\xbd\xd0\x4d\xf1\x90\x74\x8a\x9a\x2a\x56\xb6\x19\xc6\x9f\x1c\x2a\x02\xce\x23\x26\x12\x69\x45\x1a\x81\x48\x23\x69\x4d\x63\x18\x05\x59\xc6\xa8\xcf\x9d\x89\x5c\xa1\x9e\xf4\x3b\x53\xb2\x20\xa5\x54\xae\x47\x9b\xa0\x75\x46\xce\xfb\x4b\x25\x8d\xa4\xd2\xf1\x8b\x57\xdb\xb0\xdd\x83\x82\xdd\x46\x7f\x78\x5f\x45\xbe\xa0\x3d\xff\x9f\xa1\x5c\x90\x67\xed\x99\x9f\x15\x0a\xfe\x0f\x39\x78\x1c\x1e\xcd\x6d\x36\x07\xd1\x9e\xb0\xa1\xd1\xdf\xec\x96\x7a\xf4\x48\xcd\xdd\xec\xa3\x1b\x3c\x54\x65\x77\x9d\x0f\xf4\x86\x0b\xde\x23\xd3\x4e\xf6\xe0\x59\x3b\xf8\xc6\x84\xfa\x37\x41\x05\x8a\x05\xc3\x74\xe1\x01\xda\x3e\xf1\x5c\xec\x6d\xd7\x88\xed\xc7\xf0\xd1\x32\x2e\xdb\xc2\xfa\xcb\x65\xfd\xcb\x80\x74\x95\xbf\x8e\x9f\x52\xee\x95\x34\xbe\x0e\xf5\x7c\x38\xff\x06\x2d\x57\x42\x2a\xf3\x15\x41\x9b\x7a\x20\x8d\x3c\x89\x5f\x2f\x28\x57\x5a\xda\x11\xd8\xf3\x2c\x83\x77\x13\xf0\x2e\x00\xa3\x5d\x51\x14\x46\x01\x6f\xe2\xfa\xf6\x18\x78\xc2\x6e\xf7\xde\x08\x20\x1a\x56\x03\xc1\xde\x08\x20\x56\x7b\x90\xde\x18\x43\x86\x8d\x7a\x63\x16\xb2\xf3\x21\xbb\x64\x59\xc7\xee\x15\xfb\x5f\x3a\x52\xb0\xd5\x01\xf7\x34\xcb\x0e\xf8\x0f\xed\x28\xd8\x0a\xe9\xeb\xdb\xeb\x21\x59\x46\xee\x3a\xe4\x2e\xa3\xf8\x96\x6c\xf7\xb7\x1a\xe1\x70\x1f\x37\xd9\x81\xee\x5e\xd3\xc5\x3e\x38\xd0\x2b\xfd\x90\x6c\x60\xb3\xdc\x09\x07\xa2\xe9\x61\xbf\x7d\x4b\x37\x8b\xbd\xa8\x41\xd9\xcb\x3e\x7b\x81\x0f\x8b\xdd\x70\xa0\xe4\xe5\x25\xa5\x34\x7b\x5d\xec\x87\x03\xbd\xa5\xfb\x64\x9f\x26\xe9\x7c\x47\xbc\x21\xb1\x70\xe4\x3e\xe3\xf9\x0b\x30\x35\x77\xdc\x82\xd1\xb1\xb0\xfc\x4b\x8d\xf9\x8c\xe7\xab\xff\xb3\xe2\xe9\xfa\xf4\x77\x00\x00\x00\xff\xff\x14\x6d\xf8\x51\xa2\x0f\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 4002, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": {bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
